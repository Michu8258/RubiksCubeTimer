<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EmailNotSend" xml:space="preserve">
    <value>Error when attempting to send email.</value>
  </data>
  <data name="EmailNotSent" xml:space="preserve">
    <value>Sorry, but there was some issues and email was not sent.</value>
  </data>
  <data name="EmailSend" xml:space="preserve">
    <value>Email was sent successfully to user {0}.</value>
  </data>
  <data name="PasswordResetBody" xml:space="preserve">
    <value>Hi {0}!&lt;br/&gt;&lt;br/&gt;

This email was sent. because there was an request for resetting your password. Below you will find Password reset code - you need to paste it in password reset page in our website.&lt;br/&gt;

This is your password reset key:&lt;br/&gt;

&lt;strong&gt;{1}&lt;/strong&gt;&lt;br/&gt;

The request was send at {2}, and is valid till {3}. Foremore, you have {4} attempts to reset your password. If all attempts are failed, this key will no longer be vallid and you will need to send a new reauest.&lt;br/&gt;

This message was generated  and send automatically, so please do not respond to it.&lt;br/&gt;&lt;br/&gt;

Greetings,&lt;br/&gt;
Rubik's Cube Timer Team</value>
  </data>
  <data name="PasswordResetSubject" xml:space="preserve">
    <value>Paswsord reset key</value>
  </data>
  <data name="ResendVerificationCodeBody" xml:space="preserve">
    <value>Hi {0}!&lt;br/&gt;&lt;br/&gt;

This is your email verification key:&lt;br/&gt;

&lt;strong&gt;{1}&lt;/strong&gt;&lt;br/&gt;

Please use this code to verify your email address.&lt;br/&gt;

This message was generated  and send automatically, so please do not respond to it.&lt;br/&gt;&lt;br/&gt;

Greetings,&lt;br/&gt;
Rubik's Cube Timer Team</value>
  </data>
  <data name="ResendVerificationKeySybject" xml:space="preserve">
    <value>Email address reverification</value>
  </data>
  <data name="VerificationCodeBody" xml:space="preserve">
    <value>Hi {0}!&lt;br/&gt;&lt;br/&gt;

We are glad that you decided to join our online Rubik's cube timer. We hope that you will spend here some great time and will improve your times in every category.&lt;br/&gt;

This is your email verification key:&lt;br/&gt;

&lt;strong&gt;{1}&lt;/strong&gt;&lt;br/&gt;

Please use this code to verify your email address when signing in for the first time only.&lt;br/&gt;

This message was generated  and send automatically, so please do not respond to it.&lt;br/&gt;&lt;br/&gt;

Greetings,&lt;br/&gt;
Rubik's Cube Timer Team</value>
  </data>
  <data name="VerificationCodeSubject" xml:space="preserve">
    <value>Email address verification</value>
  </data>
</root>